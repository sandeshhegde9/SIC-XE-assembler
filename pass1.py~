#PASS-1 of the SIC-XE assemler. Takes the whole program as input and assigns adress to each line and assigns machine code to all OPCODEs in the program.
#Uses OPTAB for fetching machine code of the opcode and length and type of the opcode.
#Uses SYMTAB for storing symbols and their addresses, values and length.
#Writes the intermediate file. Also stores the information required for PASS-2 in a variable.

import re

#Global Declaration.
SYMTAB={}
OPTAB={}
LOCTR=0

#The 'checkSYMTAB()' function. checks if a symbol i spresent in the Global SYMTAB.
#If already present returns error. else inserts symbol and its address to SYMTAB.

def checkSYMTAB(symbol,opcode,operator):
	global LOCTR
	global SYMTAB
	#Check if the symbol is already present in SYMTAB. If present duplicate symbol error.
	if symbol in SYMTAB:
		return 1
	else:
		val=[]
		length=-1
		if opcode=='RESW':
			#Get the value and length to store in SYMTAB.
			try:length=3*int(operator)
			except:return 2
			val.append('')

		elif opcode=='RESB':
			#get the value and length to store in SYMTAB.
			try:length=int(operator)
			except:return 2
			val.append('')

		elif opcode=='WORD':
			#Get the value and length to store in SYMTAB.
			values=operator.split(',')
			length=3*len(values)
			for values in values:
				val.append(values)
			#Yet to check for right syntax (num,num,num)
	
		elif opcode=='BYTE':
			#Get the value and length to store in SYMTAB.
			values=operator.split(',')
			length=len(values)
			for values in values:
				val.append(value)
			#Yet to check for right syntax (num,num,num)

	
		
		#Insert (symbol,LOCTR,values,length) into SYMTAB.
		SYMTAB[symbol]=(symbol,LOCTR,val,length)

		return length+10
def pass1(program):
	global LOCTR
	lineno=1
	for line in program:
		ins=re.split('[ 	\n]',line)
		#If label field is not empty,check in SYMTAB.
		if ins[0]!='':
			symflag=checkSYMTAB(ins[0],ins[1],ins[2])
		if symflag==1:
			#DIspaly error(Duplicate symbol)
			print("Error:Duplicate Symbol-"+ins[0])
			continue
		elif symflag==2:
			#display error(Invalid Operand)
			print("Invalid Operand-"+ins[2])
			continue
		else:
			length=symflag-10

		#Check for OPCODE.
		opflag=checkOPCODE(ins[1])
		if opflag==1:
		#Check for RESW, RESB, WORD or byte. 
			if ins[1]=='RESW' or ins[1]=='RESB' or ins[1]=='WORD' or ins[1]=='BYTE':
				#Do nothing. It would've been handled by 'checkSYMTAB()'.
			else:
				#Display error mesage(Invalid OPCODE).
				print("Error:Invalid OPCODE-"+ins[1])
		else:
			length=opflag-10
			#Write the intermediate file. 
			#(Format:lineno address label opcode oprerands machnecode_of_OPCODE format length). and store the same thing in something for PASS-2.
		LOCTR+=length
		lineno+=1


def main():
	f=open('pgm','r')
	pass1(f)
	print SYMTAB
main()
