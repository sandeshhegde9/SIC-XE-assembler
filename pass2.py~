#Pass-2 of the SIC-XE assebbler. Takes the intermediate format and SYMTAB as input and writes the object file.


#This functions decides all the flags for an instruction. Takes a line of code as input returns a sring 'nixbpe'
def getFlag(line,disp):
	n=i=x=b=p=e=0
	#If '#' in operands then it's intermediate addressing.
	if '#' in line[3]:
		i=1
	#if '@' in operands then it's indirect addressing.
	elif '@' in line[3]:
		n=1
	#For type-3 'n' and 'i' both are 1.
	elif line[5]==3:
		n=i=1
	#For indexed addressing.
	if ',X' in line[3]:
		x=1
	#Decide whether base relative or PC relative.
	if disp=='p':
		p=1
	elif disp=='b':
		b=1
	#For type-4 e=1.
	if line[5]==4:
		e=1
	flag=str(n)+str(i)+str(x)+str(b)+str(p)+str(e)
	return flag
	
	
def pass2(prog,SYMTAB):
	for i in range(len(prog)):

		#If the instruction has a machine code convert to 6 bit binary.
		if prog[i][4]!='':
			bin_str= bin(int(prog[i][4],16))[2:].zfill(len(prog[i][4]*4))[:6]
			print bin_str

		#Flag needs to be checked and flag needs to be aded to binstring..
		flags=getFlags(prog[i],p)
		bin_string+=flags
		print bin_str
		#

		#Check instuction type and get the required target address correspondingly.
		'''elif len(operand)==0:
                        a[1]=1+10
                        a[3]=1          #type 1
                elif operand.split(',')[0] in 'BSTFAXL':
                        a[1]=2+10
                        a[3]=2          #typ2
                else:
                        a[1]=3+10
                        a[3]=3          #type 3'''
		
		b=''
		if prog[i][-1]=='4':
		#For type four 20 bit address.

			if '#' in prog[i][3]:
			#Immediate addressing.
				operand=prog[i][3].strpi('#')
				b=bin((int(operand,16))[2:].zfill(20)

		if prog[i][-1]=='3':
		#Type 3. Need to calculate Displacement. -_-

